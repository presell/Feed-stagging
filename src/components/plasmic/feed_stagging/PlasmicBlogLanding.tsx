// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mz4dsyGLPzghMRkxgaXEd2
// Component: 97Drvd1zOP
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_feed_stagging.module.css"; // plasmic-import: mz4dsyGLPzghMRkxgaXEd2/projectcss
import sty from "./PlasmicBlogLanding.module.css"; // plasmic-import: 97Drvd1zOP/css

export type PlasmicBlogLanding__VariantMembers = {};
export type PlasmicBlogLanding__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlogLanding__VariantsArgs;
export const PlasmicBlogLanding__VariantProps = new Array<VariantPropType>();

export type PlasmicBlogLanding__ArgsType = {};
type ArgPropType = keyof PlasmicBlogLanding__ArgsType;
export const PlasmicBlogLanding__ArgProps = new Array<ArgPropType>();

export type PlasmicBlogLanding__OverridesType = {
  root?: p.Flex<"div">;
  httpApiFetcher?: p.Flex<typeof DataFetcher>;
  freeBox?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  heroheadline?: p.Flex<"div">;
  link?: p.Flex<"a">;
};

export interface DefaultBlogLandingProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicBlogLanding__RenderFunc(props: {
  variants: PlasmicBlogLanding__VariantsArgs;
  args: PlasmicBlogLanding__ArgsType;
  overrides: PlasmicBlogLanding__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <DataFetcher
            data-plasmic-name={"httpApiFetcher"}
            data-plasmic-override={overrides.httpApiFetcher}
            className={classNames("__wab_instance", sty.httpApiFetcher)}
            dataName={"fetchedData" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer keyVDvhyVSx5Ntbl3"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            url={
              "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS" as const
            }
          >
            <ph.DataCtxReader>
              {$ctx =>
                (
                  (() => {
                    try {
                      return $ctx.fetchedData.records;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                    key={currentIndex}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"69px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={(() => {
                        try {
                          return currentItem.fields.logo[0].url;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <div
                      data-plasmic-name={"heroheadline"}
                      data-plasmic-override={overrides.heroheadline}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.heroheadline
                      )}
                    >
                      {(() => {
                        try {
                          return currentItem.fields.heroHeadline;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Enter some text";
                          }
                          throw e;
                        }
                      })()}
                    </div>

                    <a
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link
                      )}
                      href={`/blog-details/${(() => {
                        try {
                          return currentItem.id;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}`}
                    >
                      {"read more"}
                    </a>
                  </div>
                ))
              }
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "httpApiFetcher", "freeBox", "img", "heroheadline", "link"],
  httpApiFetcher: ["httpApiFetcher", "freeBox", "img", "heroheadline", "link"],
  freeBox: ["freeBox", "img", "heroheadline", "link"],
  img: ["img"],
  heroheadline: ["heroheadline"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpApiFetcher: typeof DataFetcher;
  freeBox: "div";
  img: typeof p.PlasmicImg;
  heroheadline: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlogLanding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlogLanding__VariantsArgs;
    args?: PlasmicBlogLanding__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlogLanding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBlogLanding__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlogLanding__ArgProps,
          internalVariantPropNames: PlasmicBlogLanding__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBlogLanding__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogLanding";
  } else {
    func.displayName = `PlasmicBlogLanding.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogLanding = Object.assign(
  // Top-level PlasmicBlogLanding renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    heroheadline: makeNodeComponent("heroheadline"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicBlogLanding
    internalVariantProps: PlasmicBlogLanding__VariantProps,
    internalArgProps: PlasmicBlogLanding__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBlogLanding;
/* prettier-ignore-end */
