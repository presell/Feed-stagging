// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mz4dsyGLPzghMRkxgaXEd2
// Component: xwMh7GcRf2
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_feed_stagging.module.css"; // plasmic-import: mz4dsyGLPzghMRkxgaXEd2/projectcss
import sty from "./PlasmicBlogDetails.module.css"; // plasmic-import: xwMh7GcRf2/css

export type PlasmicBlogDetails__VariantMembers = {};
export type PlasmicBlogDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlogDetails__VariantsArgs;
export const PlasmicBlogDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicBlogDetails__ArgsType = {};
type ArgPropType = keyof PlasmicBlogDetails__ArgsType;
export const PlasmicBlogDetails__ArgProps = new Array<ArgPropType>();

export type PlasmicBlogDetails__OverridesType = {
  root?: p.Flex<"div">;
  httpApiFetcher?: p.Flex<typeof DataFetcher>;
  logo?: p.Flex<typeof p.PlasmicImg>;
  heroHeadline?: p.Flex<"div">;
  heroSubHeadline?: p.Flex<"div">;
  heroImage?: p.Flex<typeof p.PlasmicImg>;
  paragraph1?: p.Flex<"div">;
  image1?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultBlogDetailsProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicBlogDetails__RenderFunc(props: {
  variants: PlasmicBlogDetails__VariantsArgs;
  args: PlasmicBlogDetails__ArgsType;
  overrides: PlasmicBlogDetails__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <DataFetcher
            data-plasmic-name={"httpApiFetcher"}
            data-plasmic-override={overrides.httpApiFetcher}
            className={classNames("__wab_instance", sty.httpApiFetcher)}
            dataName={"dynamic_data" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer keyVDvhyVSx5Ntbl3"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS/" +
                  $ctx.params.id
                );
              } catch (e) {
                if (e instanceof TypeError) {
                  return "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS/id=";
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <p.PlasmicImg
                    data-plasmic-name={"logo"}
                    data-plasmic-override={overrides.logo}
                    alt={""}
                    className={classNames(sty.logo)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={(() => {
                      try {
                        return $ctx.dynamic_data.fields.logo[0].url;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    data-plasmic-name={"heroHeadline"}
                    data-plasmic-override={overrides.heroHeadline}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.heroHeadline
                    )}
                  >
                    {(() => {
                      try {
                        return $ctx.dynamic_data.fields.heroHeadline;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>

                  <div
                    data-plasmic-name={"heroSubHeadline"}
                    data-plasmic-override={overrides.heroSubHeadline}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.heroSubHeadline
                    )}
                  >
                    {(() => {
                      try {
                        return $ctx.dynamic_data.fields.heroSubHeadline;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>

                  <p.PlasmicImg
                    data-plasmic-name={"heroImage"}
                    data-plasmic-override={overrides.heroImage}
                    alt={""}
                    className={classNames(sty.heroImage)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={(() => {
                      try {
                        return $ctx.dynamic_data.fields.heroImage[0].url;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    data-plasmic-name={"paragraph1"}
                    data-plasmic-override={overrides.paragraph1}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.paragraph1
                    )}
                  >
                    {(() => {
                      try {
                        return $ctx.dynamic_data.fields.paragraph1;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>

                  <p.PlasmicImg
                    data-plasmic-name={"image1"}
                    data-plasmic-override={overrides.image1}
                    alt={""}
                    className={classNames(sty.image1)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={(() => {
                      try {
                        return $ctx.dynamic_data.fields.image1[0].url;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpApiFetcher",
    "logo",
    "heroHeadline",
    "heroSubHeadline",
    "heroImage",
    "paragraph1",
    "image1"
  ],
  httpApiFetcher: [
    "httpApiFetcher",
    "logo",
    "heroHeadline",
    "heroSubHeadline",
    "heroImage",
    "paragraph1",
    "image1"
  ],
  logo: ["logo"],
  heroHeadline: ["heroHeadline"],
  heroSubHeadline: ["heroSubHeadline"],
  heroImage: ["heroImage"],
  paragraph1: ["paragraph1"],
  image1: ["image1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpApiFetcher: typeof DataFetcher;
  logo: typeof p.PlasmicImg;
  heroHeadline: "div";
  heroSubHeadline: "div";
  heroImage: typeof p.PlasmicImg;
  paragraph1: "div";
  image1: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlogDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlogDetails__VariantsArgs;
    args?: PlasmicBlogDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlogDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBlogDetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlogDetails__ArgProps,
          internalVariantPropNames: PlasmicBlogDetails__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBlogDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogDetails";
  } else {
    func.displayName = `PlasmicBlogDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogDetails = Object.assign(
  // Top-level PlasmicBlogDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    logo: makeNodeComponent("logo"),
    heroHeadline: makeNodeComponent("heroHeadline"),
    heroSubHeadline: makeNodeComponent("heroSubHeadline"),
    heroImage: makeNodeComponent("heroImage"),
    paragraph1: makeNodeComponent("paragraph1"),
    image1: makeNodeComponent("image1"),

    // Metadata about props expected for PlasmicBlogDetails
    internalVariantProps: PlasmicBlogDetails__VariantProps,
    internalArgProps: PlasmicBlogDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBlogDetails;
/* prettier-ignore-end */
